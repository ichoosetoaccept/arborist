# Project Rules

## Project Structure

- Use src/arborist/ for main package code
- Keep tests/ directory for pytest files
- Use pyproject.toml for project metadata and dependencies
- Config file should be in user's home directory as .arboristrc

## Git Branching

- Create new branches for all features and fixes
- Branch names should be descriptive of the change
- Never work directly on main branch
- Always review changes with `git diff` before committing

## Dependencies

- Use uv/uvx for all Python package management:
  - Installing dependencies
  - Building packages
  - Publishing packages
  - Managing virtual environments
- Required packages defined in pyproject.toml:
  - typer: For CLI interface
  - rich: For terminal output formatting
  - pydantic: For config file validation

## Code Style

- Use Python type hints everywhere (Python 3.12+)
- Follow PEP 8 style guide with 88 character line length
- Use double quotes for strings
- Use docstrings for all public functions
- Keep functions focused and small
- Use rich for colored output
- Use Ruff for Python linting and formatting:
  - Enable auto-fix for all fixable rules
  - Run Ruff before commits via pre-commit
  - Configured rules: E, W, F, I, B, C, UP, RUF, PL, N, D, COM

## Testing

- Write pytest tests for all functionality
- Use real Git repositories for testing
- Test all CLI options and flags
- Test config file handling
- Test error cases
- Maintain test coverage reporting with pytest-cov
- Configure coverage exclusions in pyproject.toml
- Test progress bars and callbacks:
  - Verify callback messages and formatting
  - Test progress bar integration with rich
- Virtual Environment Setup:
  - Always use uv venv for creating virtual environments
  - Create .venv in project root: `uv venv .venv`
  - Activate environment: `source .venv/bin/activate`
  - Install in dev mode: `uv pip install -e ".[dev]"`

## Git Branch Cleanup Features

- Detect and clean gone remote branches
- Handle merged branches
- Support protected branches list
- Interactive mode for confirmation
- Dry run mode to preview changes
- Repository optimization (gc and prune)
- Config file for user preferences

## Error Handling

- Graceful handling of git command failures
- Clear error messages with rich formatting
- Validate config file format with pydantic
- Check if in git repository
- Handle permission issues
- Fallback to defaults on config errors

## User Experience

- Clear, colored output with rich
- Progress indicators for operations
- Confirmation prompts in interactive mode
- Helpful error messages
- Support --help with good documentation
- Dry run mode for safety

## Configuration

- Config file in JSON format (.arboristrc)
- Support for:
  - Protected branches list (defaults to ["main"])
  - Default dry run setting
  - Interactive mode preference
  - Skip gc option

## Security

- No shell injection vulnerabilities
- Safe handling of file paths with pathlib
- Careful git command execution
- Protected branches safety
- UTF-8 encoding for all file operations

## Performance

- Efficient git command execution
- Minimize unnecessary operations
- Smart branch filtering
- Optional gc optimization

## Development Tools

- Use pre-commit hooks for:
  - Ruff linting and formatting
  - Type checking
  - Other code quality checks
- Configure all tools in pyproject.toml
- Run tools before commits
