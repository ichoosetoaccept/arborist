# Git Branch Cleanup Tool Rules

## Project Structure

- Use src/git_cleanup/ for main package code
- Keep tests/ directory for pytest files
- Use pyproject.toml for project metadata and dependencies
- Config file should be in user's home directory as .git-cleanuprc

## Git Branching

- Create new branches for all features and fixes
- Branch names should be descriptive of the change
- Never work directly on main/master branch

## Dependencies

- Use uv/uvx for Python package management
- Required packages:
  - typer: For CLI interface
  - rich: For terminal output formatting
  - pydantic: For config file validation
  - pytest: For testing

## Code Style

- Use Python type hints everywhere
- Follow PEP 8 style guide
- Use docstrings for all public functions
- Keep functions focused and small
- Use rich for colored output
- Use Ruff for Python linting and auto-fixing:
  - Enable auto-fix for all fixable rules
  - Run Ruff before commits
  - Configure in pyproject.toml

## Testing

- Write pytest tests for all functionality
- Mock git commands in tests
- Test all CLI options and flags
- Test config file handling
- Test error cases

## Git Branch Cleanup Features

- Detect and clean gone remote branches
- Handle merged branches
- Support protected branches list
- Interactive mode for confirmation
- Dry run mode to preview changes
- Repository optimization (gc and prune)
- Config file for user preferences

## Error Handling

- Graceful handling of git command failures
- Clear error messages for users
- Validate config file format
- Check if in git repository
- Handle permission issues

## User Experience

- Clear, colored output
- Progress indicators for long operations
- Confirmation prompts in interactive mode
- Helpful error messages
- Support --help with good documentation

## Configuration

- Config file in JSON format
- Support for:
  - Protected branches list
  - Default dry run setting
  - Interactive mode preference
  - Skip gc option
  - Reflog expiry setting

## Security

- No shell injection vulnerabilities
- Safe handling of file paths
- Careful git command execution
- Protected branches safety

## Performance

- Efficient git command execution
- Minimize unnecessary operations
- Smart branch filtering

## Documentation and Linting

- Use markdownlint for consistent markdown formatting
- Required markdown rules:
  - No trailing spaces
  - Consistent header hierarchy
  - No multiple top-level headers
  - No empty links
  - Proper list indentation
  - No bare URLs
  - Line length limits
- Auto-fix markdown issues where possible
- Run markdown linting in CI/CD
- Include markdownlint configuration file
